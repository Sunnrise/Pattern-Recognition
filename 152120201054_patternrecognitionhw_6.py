# -*- coding: utf-8 -*-
"""152120201054_PatternRecognitionHW_6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wwf87MWz1OJSANLWWAsO7a_hFTV5_C-B

# Training documents and labels
"""

import numpy as np
from sklearn.neighbors import KNeighborsClassifier
import pandas as pd

docs = {
    "d1": ["free", "free", "free", "buy", "discount", "combo", "pleasure"],
    "d2": ["free", "free", "free", "discount", "pleasure", "smile", "smile", "smile"],
    "d3": ["cat", "mouse"],
    "d4": ["cat", "cat", "dog", "dog", "dog", "dog"],
    "d5": ["mouse"]
}

labels = {
    "d1": "S",
    "d2": "S",
    "d3": "N",
    "d4": "N",
    "d5": "N"
}

"""# Step 2: Calculate Gini Index for each word"""

def compute_gini(word):
    s_docs = [doc for doc in docs if labels[doc] == "S"]
    n_docs = [doc for doc in docs if labels[doc] == "N"]
    ps = sum(word in set(docs[doc]) for doc in s_docs) / len(s_docs)
    pn = sum(word in set(docs[doc]) for doc in n_docs) / len(n_docs)
    return ps**2 + pn**2

# Get all unique words
vocab = sorted(set(w for words in docs.values() for w in words))
gini_scores = {word: compute_gini(word) for word in vocab}
sorted_gini = sorted(gini_scores.items(), key=lambda x: x[1], reverse=True)
top_words = [word for word, _ in sorted_gini[:2]]
print("Top 2 words by Gini Index:", top_words)

"""
# Step 3: Build training feature matrix"""

def word_count_vector(words, features):
    return [words.count(f) for f in features]

X_train = np.array([word_count_vector(docs[doc], top_words) for doc in docs])
y_train = np.array([labels[doc] for doc in docs])

# Display the training data
df_train = pd.DataFrame(X_train, columns=top_words)
df_train["Label"] = y_train
print("\nTraining feature matrix:")
print(df_train)

"""# Step 4: Prepare test docs"""

d6 = ["dog", "cat", "mouse","cat"]
d7 = ["Free", "free", "smile"]

x_d6 = np.array(word_count_vector(d6, top_words)).reshape(1, -1)
x_d7 = np.array(word_count_vector(d7, top_words)).reshape(1, -1)

"""# Step 5: KNN Classification
If we used free, free, smile for d7 pred_d7 must be S
"""

knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train, y_train)

pred_d6 = knn.predict(x_d6)[0]
pred_d7 = knn.predict(x_d7)[0]

print("\nPrediction for d6 (dog, cat, mouse, cat):", pred_d6)
print("Prediction for d7 (Free, free, smile):", pred_d7)