# -*- coding: utf-8 -*-
"""152120201054_PatternRecognitionHW_4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FD-OeZc51S14np7XVbGMurEVH_00AjDU
"""

!pip install scikit-image opencv-python scikit-learn

import zipfile
import cv2
import numpy as np
from skimage.color import rgb2lab
from skimage.feature import SIFT
from tqdm import tqdm
import os
# --------------------- 2. ZIP Dosyasını Aç ---------------------
zip_path = "/content/HW4_feature_selection.zip"  # ZIP dosyasının doğru adını buraya yaz
extract_dir = "/content/dataset"

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_dir)  # klasöre çıkar

# Path'leri ayarla
train_path = "/content/dataset/HWData/train"
test_path = "/content/dataset/HWData/test"

"""SIFT FEATURES EXTRACTION"""

def extract_sift_features(image_path):
    img = cv2.imread(image_path)
    img = cv2.resize(img, (224, 224))
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    lab_img = rgb2lab(img)

    sift = SIFT()
    sift.detect_and_extract(lab_img[:, :, 0])  # Sadece L kanalı
    descriptors = sift.descriptors
    if descriptors is None:
        return np.zeros((1, 128))
    return descriptors

"""READING TRAIN DATA"""

# Eğitim verisini oku
X_train, y_train = [], []
labels = sorted(os.listdir(train_path))
label_map = {label: idx for idx, label in enumerate(labels)}

for label in tqdm(labels):
    class_dir = os.path.join(train_path, label)
    for img_file in os.listdir(class_dir):
        img_path = os.path.join(class_dir, img_file)
        desc = extract_sift_features(img_path)
        desc_mean = np.mean(desc, axis=0)  # Deskriptörlerin ortalaması
        X_train.append(desc_mean)
        y_train.append(label_map[label])

X_train = np.array(X_train)
y_train = np.array(y_train)

print("X_train shape:", X_train.shape)
print("y_train shape:", y_train.shape)
print("Feature size (M):", X_train.shape[1])

"""FEATURE SELECTOR"""

from sklearn.feature_selection import SequentialFeatureSelector
from sklearn.svm import LinearSVC

svm_model = LinearSVC(dual=False, max_iter=5000)

sfs = SequentialFeatureSelector(
    svm_model,
    n_features_to_select=64,
    direction='forward',
    n_jobs=-1,
    cv=2,
    tol=1e-2
)

sfs.fit(X_train, y_train)
X_train_selected = sfs.transform(X_train)

print("New feature size:", X_train_selected.shape[1])

X_test, y_test = [], []

for label in tqdm(labels):  # labels eğitim verisinden alındı
    class_dir = os.path.join(test_path, label)
    for img_file in os.listdir(class_dir):
        img_path = os.path.join(class_dir, img_file)
        desc = extract_sift_features(img_path)
        desc_mean = np.mean(desc, axis=0)
        X_test.append(desc_mean)
        y_test.append(label_map[label])

X_test = np.array(X_test)
y_test = np.array(y_test)

# Öznitelik seçimini test verisine uygula
X_test_selected = sfs.transform(X_test)

svm_model.fit(X_train_selected, y_train) # This line is added to fit the model

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

y_pred = svm_model.predict(X_test_selected)
cm = confusion_matrix(y_test, y_pred)

disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=labels)
disp.plot(xticks_rotation=90)
plt.title("Confusion Matrix")
plt.show()