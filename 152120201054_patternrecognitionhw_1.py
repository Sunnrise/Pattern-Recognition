# -*- coding: utf-8 -*-
"""152120201054_PatternRecognitionHW_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KklDpSMLnI887IHx87uqR1NNiYZUd8Gt
"""

from google.colab import drive #I added the zip file to my Google Drive
drive.mount('/content/drive')

import numpy as np
import matplotlib.pyplot as plt
from skimage import io, color, transform
from google.colab import drive

# Dosya yolları
dataset_path = '/content/'

# Load the color template image
color_template = io.imread(dataset_path + 'color_template.png')

def rgb_to_yiq(image):
    image = image.astype(np.float32) / 255.0  # Normalize to [0,1]
    yiq_img = np.zeros_like(image, dtype=np.float32)
    for i in range(image.shape[0]):
        for j in range(image.shape[1]):
            r, g, b = image[i, j]
            y = 0.299 * r + 0.587 * g + 0.114 * b
            i_val = 0.5959 * r - 0.2746 * g - 0.3213 * b
            q = 0.2115 * r - 0.5227 * g + 0.3112 * b
            yiq_img[i, j] = [y, i_val, q]
    return yiq_img

def yiq_to_rgb(image):
    rgb_img = np.zeros_like(image, dtype=np.float32)
    for i in range(image.shape[0]):
        for j in range(image.shape[1]):
            y, i_val, q = image[i, j]
            r = y + 0.9563 * i_val + 0.6210 * q
            g = y - 0.2721 * i_val - 0.6474 * q
            b = y - 1.1070 * i_val + 1.7046 * q
            rgb_img[i, j] = [r, g, b]
    return np.clip(rgb_img * 255, 0, 255).astype(np.uint8)

# Convert the color template to YIQ and back to RGB
yiq_img = rgb_to_yiq(color_template)
rgb_converted = yiq_to_rgb(yiq_img)

# Display the Y, I, and Q components
fig, ax = plt.subplots(1, 3, figsize=(15, 5))
ax[0].imshow(yiq_img[:, :, 0], cmap='gray', vmin=0, vmax=1)
ax[0].set_title("Y Bileşeni")
ax[1].imshow(yiq_img[:, :, 1], cmap='gray', vmin=-0.6, vmax=0.6)
ax[1].set_title("I Bileşeni")
ax[2].imshow(yiq_img[:, :, 2], cmap='gray', vmin=-0.6, vmax=0.6)
ax[2].set_title("Q Bileşeni")
plt.show()

# Save and display the RGB converted image
io.imsave(dataset_path + 'rgb_converted.jpg', rgb_converted)

# Display the RGB conversion result
plt.figure(figsize=(10, 5))
plt.imshow(rgb_converted)
plt.title('RGB’ye Geri Dönüşüm')
plt.show()



import numpy as np
import matplotlib.pyplot as plt
from skimage.transform import resize

def rgb2yiq(img):
    transform_matrix = np.array([[0.2126, 0.7152, 0.0722],
                                [-0.09991, -0.33609, 0.436],
                                [0.615, -0.55861, -0.05639]])
    yiq_img = np.dot(img, transform_matrix.T)
    return yiq_img

def yiq2rgb(yiq_img):

    transform_matrix = np.array([[1, 0, 1.28033],
                                [1, -0.21482, -0.38059],
                                [1, 2.12798, 0]])
    rgb_img = np.dot(yiq_img, transform_matrix.T)
    return rgb_img


file_paths = ['/content/cat1.jpg', '/content/cat2.jpg', '/content/cat3.jpg', '/content/dog1.jpg']
images = [resize(plt.imread(file), (224, 224), mode='reflect') for file in file_paths]

template_path = '/content/color_template.png'
template = plt.imread(template_path)

fig, axes = plt.subplots(4, 5, figsize=(20, 15))

for i, ax_row in enumerate(axes):
    img = images[i]

    yiq_img = rgb2yiq(img)
    rgb_img = yiq2rgb(yiq_img)

    Y_channel = yiq_img[:, :, 0]
    I_channel = yiq_img[:, :, 1]
    Q_channel = yiq_img[:, :, 2]

    template_resized = resize(template, img.shape, mode='reflect', anti_aliasing=True)

    transformed_with_template = rgb_img * template_resized

    ax_row[0].imshow(img)
    ax_row[0].set_title(f'Original Image {i+1}')
    ax_row[0].axis('off')

    ax_row[1].imshow(Y_channel, cmap='gray')
    ax_row[1].set_title(f'Y Channel {i+1}')
    ax_row[1].axis('off')

    ax_row[2].imshow(I_channel, cmap='gray')
    ax_row[2].set_title(f'I Channel {i+1}')
    ax_row[2].axis('off')

    ax_row[3].imshow(Q_channel, cmap='gray')
    ax_row[3].set_title(f'Q Channel {i+1}')
    ax_row[3].axis('off')

    transformed_with_template = np.clip(rgb_img * template_resized, 0, 1)

    ax_row[4].imshow(transformed_with_template)
    ax_row[4].set_title(f'Transformed Image with Template {i+1}')
    ax_row[4].axis('off')

plt.tight_layout()
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from skimage.transform import rotate, resize

file_paths = ['/content/cat1.jpg', '/content/cat2.jpg', '/content/cat3.jpg', '/content/dog1.jpg']

images = [resize(plt.imread(file), (224, 224), mode='reflect') for file in file_paths]

fig, axes = plt.subplots(4, 6, figsize=(18, 12))

for i, ax_row in enumerate(axes):
    img = images[i]

    flipped_vertical = np.flipud(img)

    flipped_horizontal = np.fliplr(img)

    rotated_left = rotate(img, 90, resize=True)

    rotated_right = rotate(img, -90, resize=True)

    resized_img = resize(img, (img.shape[0] // 2, img.shape[1] // 2))

    ax_row[0].imshow(img)
    ax_row[0].set_title(f'Original {i+1}\nSize: {img.shape[0]}x{img.shape[1]}')
    ax_row[0].axis('off')

    ax_row[1].imshow(flipped_vertical)
    ax_row[1].set_title(f'Flipped Vertically {i+1}\nSize: {flipped_vertical.shape[0]}x{flipped_vertical.shape[1]}')
    ax_row[1].axis('off')

    ax_row[2].imshow(flipped_horizontal)
    ax_row[2].set_title(f'Flipped Horizontally {i+1}\nSize: {flipped_horizontal.shape[0]}x{flipped_horizontal.shape[1]}')
    ax_row[2].axis('off')

    ax_row[3].imshow(rotated_left)
    ax_row[3].set_title(f'Rotated Left 90° {i+1}\nSize: {rotated_left.shape[0]}x{rotated_left.shape[1]}')
    ax_row[3].axis('off')

    ax_row[4].imshow(rotated_right)
    ax_row[4].set_title(f'Rotated Right 90° {i+1}\nSize: {rotated_right.shape[0]}x{rotated_right.shape[1]}')
    ax_row[4].axis('off')

    ax_row[5].imshow(resized_img)
    ax_row[5].set_title(f'Resized to Half {i+1}\nSize: {resized_img.shape[0]}x{resized_img.shape[1]}')
    ax_row[5].axis('off')

plt.tight_layout(pad=1.0)
plt.show()